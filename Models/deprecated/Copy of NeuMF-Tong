{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"Copy of NeuMF-Tong","provenance":[],"collapsed_sections":[],"authorship_tag":"ABX9TyNOocZlqazyO+CeIDmBYNTV"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"},"accelerator":"GPU"},"cells":[{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"W4Eryx2cRYMB","executionInfo":{"status":"ok","timestamp":1622346074904,"user_tz":240,"elapsed":118,"user":{"displayName":"TONG WU","photoUrl":"","userId":"01876243748839276301"}},"outputId":"450aebe4-9ad2-4e98-d295-e65aa610ebd6"},"source":["# Mount your google drive in google colab\n","from google.colab import drive\n","drive.mount('/content/drive')\n","import sys\n","sys.path.insert(0,'/content/drive/MyDrive/CS247/Models')"],"execution_count":1,"outputs":[{"output_type":"stream","text":["Drive already mounted at /content/drive; to attempt to forcibly remount, call drive.mount(\"/content/drive\", force_remount=True).\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"rI74g72bRfQl","executionInfo":{"status":"ok","timestamp":1622346075505,"user_tz":240,"elapsed":484,"user":{"displayName":"TONG WU","photoUrl":"","userId":"01876243748839276301"}}},"source":["import numpy as np\n","import pandas as pd\n","from util import *\n","from model import MLPEmbedding\n","from evaluate import *\n","import torch\n","import torch.nn as nn\n","from torch import optim\n","\n","%matplotlib inline\n","%load_ext autoreload\n","%autoreload 2"],"execution_count":2,"outputs":[]},{"cell_type":"code","metadata":{"id":"gp2dwImNRgdk","executionInfo":{"status":"ok","timestamp":1622346075910,"user_tz":240,"elapsed":406,"user":{"displayName":"TONG WU","photoUrl":"","userId":"01876243748839276301"}}},"source":["train_data = pd.read_pickle(\"/content/drive/MyDrive/CS247/Data/train_data.pkl\")\n","val_data = pd.read_pickle(\"/content/drive/MyDrive/CS247/Data/val_data.pkl\")\n","test_data = pd.read_pickle(\"/content/drive/MyDrive/CS247/Data/test_data.pkl\")[['review_profilename','beer_name','review_overall']]\n","test_data = merge_user_id(test_data, on='review_profilename').rename(columns={'id':'user_id'})\n","test_data = merge_beer_id(test_data, on='beer_name').rename(columns={'id':'beer_id'})[['user_id','beer_id','review_overall']]"],"execution_count":3,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":204},"id":"YTpbq64pZUnf","executionInfo":{"status":"ok","timestamp":1622346075913,"user_tz":240,"elapsed":9,"user":{"displayName":"TONG WU","photoUrl":"","userId":"01876243748839276301"}},"outputId":"766a0d5a-599a-4c40-d638-1b15ee22ff53"},"source":["# convert review score to boolean - if the item is relevant to the user (rating >= 3.5) then 1, else 0\n","threshold = 4.0\n","train_data['relevant'] = (train_data['review_overall'] >= threshold).astype(int)\n","train_data.head()"],"execution_count":4,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>user_id</th>\n","      <th>beer_id</th>\n","      <th>review_overall</th>\n","      <th>relevant</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>383941</th>\n","      <td>415</td>\n","      <td>831</td>\n","      <td>3.5</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>483700</th>\n","      <td>2492</td>\n","      <td>3491</td>\n","      <td>4.0</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>375376</th>\n","      <td>1233</td>\n","      <td>1178</td>\n","      <td>4.5</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>705138</th>\n","      <td>1230</td>\n","      <td>902</td>\n","      <td>4.5</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>435972</th>\n","      <td>2290</td>\n","      <td>7497</td>\n","      <td>3.5</td>\n","      <td>0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["        user_id  beer_id  review_overall  relevant\n","383941      415      831             3.5         0\n","483700     2492     3491             4.0         1\n","375376     1233     1178             4.5         1\n","705138     1230      902             4.5         1\n","435972     2290     7497             3.5         0"]},"metadata":{"tags":[]},"execution_count":4}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"QXbPZoGMYXPw","executionInfo":{"status":"ok","timestamp":1622346075913,"user_tz":240,"elapsed":8,"user":{"displayName":"TONG WU","photoUrl":"","userId":"01876243748839276301"}},"outputId":"1a073e16-68ef-4b9f-df92-6bc5433948f7"},"source":["### unique users & beers in train_data\n","n_users = len(train_data['user_id'].unique())\n","n_beers = len(train_data['beer_id'].unique())\n","print(\"unique users: \", n_users)\n","print(\"unique beers: \", n_beers)"],"execution_count":5,"outputs":[{"output_type":"stream","text":["unique users:  14811\n","unique beers:  52583\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"boV7OcJRRhxU","executionInfo":{"status":"ok","timestamp":1622346076054,"user_tz":240,"elapsed":146,"user":{"displayName":"TONG WU","photoUrl":"","userId":"01876243748839276301"}}},"source":["class NeuMF(nn.Module):\n","  def __init__(self, n_users, n_beers, mlp_hidden_size, gmf_hidden_size, alpha, device=torch.device(\"cuda:0\" if torch.cuda.is_available() else \"cpu\")):\n","    super().__init__()\n","    self.device = device\n","    self.mlp_users_emb = nn.Embedding(n_users, mlp_hidden_size).to(device)\n","    self.mlp_beers_emb = nn.Embedding(n_beers, mlp_hidden_size).to(device)\n","    self.mlp = nn.Sequential(\n","        nn.Linear(mlp_hidden_size*2, 200),\n","        nn.BatchNorm1d(200),\n","        nn.ReLU(),\n","        nn.Dropout(0.6),\n","        nn.Linear(200, 100),\n","        nn.BatchNorm1d(100),\n","        nn.ReLU(),\n","        nn.Dropout(0.6),\n","        nn.Linear(100, 50),\n","        nn.BatchNorm1d(50),\n","        nn.ReLU(),\n","        nn.Dropout(0.6),\n","        nn.Linear(50, 25),\n","        nn.BatchNorm1d(25),\n","        nn.ReLU(),\n","        nn.Dropout(0.6),\n","    ).to(device)\n","\n","    self.alpha = alpha\n","    self.gmf_user_emb = nn.Embedding(n_users,gmf_hidden_size)\n","    self.gmf_item_emb = nn.Embedding(n_beers,gmf_hidden_size)\n","    self.h_out = nn.Linear(gmf_hidden_size,1)\n","\n","    self.neu_layer = nn.Linear(gmf_hidden_size+25, 1)\n","\n","  \n","  def forward(self, df):    \n","    user_idx = torch.LongTensor(df.user_id.to_numpy()).to(self.device)\n","    beer_idx = torch.LongTensor(df.beer_id.to_numpy()).to(self.device)\n","    p = self.gmf_user_emb(user_idx)\n","    q = self.gmf_item_emb(beer_idx)\n","    gmf_out = p*q # (n, gmf_hidden_size)\n","    \n","    input = torch.cat((alpha*self.mlp_users_emb(user_idx), (1-alpha)*self.mlp_beers_emb(beer_idx)), 1).to(self.device)\n","    mlp_out = self.mlp(input) # (n, 25)\n","\n","    neumf_in = torch.cat((gmf_out, mlp_out), 1).to(self.device) # (n, 25 + gmf_hidden_size)\n","\n","    return self.neu_layer(neumf_in)\n","\n","  def predict(self, df):\n","    return torch.sigmoid(self.forward(df))\n","\n","  def loss(self, df, loss_fn):\n","    y_pred = self.forward(df).view(-1)\n","    y_train = torch.Tensor(df.relevant.to_numpy()).to(self.device)\n","    \n","    return loss_fn(y_pred, y_train)"],"execution_count":6,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"sqI9AmOKW3YC","executionInfo":{"status":"ok","timestamp":1622350000256,"user_tz":240,"elapsed":3924204,"user":{"displayName":"TONG WU","photoUrl":"","userId":"01876243748839276301"}},"outputId":"ea5e238e-e0e7-402e-eaaf-4fe8ebe7ee28"},"source":["import math\n","\n","# device = gpu\n","device = torch.device(\"cuda:0\" if torch.cuda.is_available() else \"cpu\")\n","## model params\n","mlp_hidden_size = 150\n","gmf_hidden_size = 5\n","epochs = 40\n","batch_size = 500\n","lr = 0.001\n","loss_fn = nn.BCEWithLogitsLoss()\n","label_pred = 'pred_y'\n","alpha=0.4\n","k=5\n","\n","# n_users, n_beers, mlp_hidden_size, gmf_hidden_size, device\n","neu_mf = NeuMF(n_users=n_users, n_beers=n_beers, mlp_hidden_size=mlp_hidden_size, gmf_hidden_size=gmf_hidden_size, alpha=alpha, device=device).to(device)\n","\n","optimizer = optim.Adam(neu_mf.parameters(), lr=lr, weight_decay=5e-4)\n","scheduler = torch.optim.lr_scheduler.MultiStepLR(optimizer, [5,10,20], gamma=0.5)\n","\n","l = []\n","val_p = []\n","train_p = []\n","best_p = 0\n","\n","for i in range(epochs):\n","    print(\"epoch: \",i)\n","    s = 0\n","    for bid in range(len(train_data) // batch_size):\n","        if (bid % 300 == 0):\n","          print(\"iteration: \",i, \", batch: \", bid)\n","        data = train_data[bid * batch_size : (bid + 1) * batch_size]\n","        optimizer.zero_grad()\n","        \n","        loss = neu_mf.loss(data, loss_fn)\n","        loss.backward()\n","        optimizer.step()\n","        s += loss\n","        \n","    scheduler.step()\n","    l.append(s.item()/(len(data) // batch_size))  \n","\n","    # evaluate precision at 10 of the model\n","  \n","    neu_mf.eval()\n","    with torch.no_grad():\n","      val = val_data.copy()\n","      val[label_pred] = (neu_mf.predict(val).cpu().detach().numpy() > 0.5).astype(int)\n","      val_prec, _ = precision_recall_at_k(val, label_pred=label_pred, threshold=threshold, k=k)\n","      val_prec = sum(prec for prec in val_prec.values()) / len(val_prec)\n","      train = train_data.copy()\n","      train[label_pred] = (neu_mf.predict(train).cpu().detach().numpy() > 0.5).astype(int)\n","      train_prec, _ = precision_recall_at_k(train, label_pred=label_pred, threshold=threshold, k=k)\n","      train_prec = sum(prec for prec in train_prec.values()) / len(train_prec)\n","\n","      train_p.append(train_prec)\n","      val_p.append(val_prec)\n","    neu_mf.train()\n","    \n","    print(\"Train precision at 5: \", train_prec)\n","    print(\"Validation precision at 5: \", val_prec)\n","    print(\"Current best validation precision at 5: \", best_p)\n","    if val_prec > best_p:\n","      print(\"Validation precision better than best current precision. Saving model to best_state_dict...\")\n","      best_state_dict = {\n","           'model_state_dict': neu_mf.state_dict()\n","           }\n","      best_p = val_prec\n","\n","      \n","    print(\"Average Loss for the current iteration: \", l[i])\n","    print(\"-----------------------------------\")"],"execution_count":7,"outputs":[{"output_type":"stream","text":["epoch:  0\n","iteration:  0 , batch:  0\n","iteration:  0 , batch:  300\n","iteration:  0 , batch:  600\n","iteration:  0 , batch:  900\n","iteration:  0 , batch:  1200\n","iteration:  0 , batch:  1500\n","iteration:  0 , batch:  1800\n","Train precision at 5:  0.6644926068462775\n","Validation precision at 5:  0.6647210406679883\n","Current best validation precision at 5:  0\n","Validation precision better than best current precision. Saving model to best_state_dict...\n","Average Loss for the current iteration:  1229.3289794921875\n","-----------------------------------\n","epoch:  1\n","iteration:  1 , batch:  0\n","iteration:  1 , batch:  300\n","iteration:  1 , batch:  600\n","iteration:  1 , batch:  900\n","iteration:  1 , batch:  1200\n","iteration:  1 , batch:  1500\n","iteration:  1 , batch:  1800\n","Train precision at 5:  0.7195699142529315\n","Validation precision at 5:  0.6921330992730783\n","Current best validation precision at 5:  0.6647210406679883\n","Validation precision better than best current precision. Saving model to best_state_dict...\n","Average Loss for the current iteration:  1166.9688720703125\n","-----------------------------------\n","epoch:  2\n","iteration:  2 , batch:  0\n","iteration:  2 , batch:  300\n","iteration:  2 , batch:  600\n","iteration:  2 , batch:  900\n","iteration:  2 , batch:  1200\n","iteration:  2 , batch:  1500\n","iteration:  2 , batch:  1800\n","Train precision at 5:  0.7299844710012939\n","Validation precision at 5:  0.7010071343371077\n","Current best validation precision at 5:  0.6921330992730783\n","Validation precision better than best current precision. Saving model to best_state_dict...\n","Average Loss for the current iteration:  1108.345947265625\n","-----------------------------------\n","epoch:  3\n","iteration:  3 , batch:  0\n","iteration:  3 , batch:  300\n","iteration:  3 , batch:  600\n","iteration:  3 , batch:  900\n","iteration:  3 , batch:  1200\n","iteration:  3 , batch:  1500\n","iteration:  3 , batch:  1800\n","Train precision at 5:  0.7392433551639653\n","Validation precision at 5:  0.7021909391668509\n","Current best validation precision at 5:  0.7010071343371077\n","Validation precision better than best current precision. Saving model to best_state_dict...\n","Average Loss for the current iteration:  1086.8021240234375\n","-----------------------------------\n","epoch:  4\n","iteration:  4 , batch:  0\n","iteration:  4 , batch:  300\n","iteration:  4 , batch:  600\n","iteration:  4 , batch:  900\n","iteration:  4 , batch:  1200\n","iteration:  4 , batch:  1500\n","iteration:  4 , batch:  1800\n","Train precision at 5:  0.7415108140346258\n","Validation precision at 5:  0.7056703351113081\n","Current best validation precision at 5:  0.7021909391668509\n","Validation precision better than best current precision. Saving model to best_state_dict...\n","Average Loss for the current iteration:  1078.40380859375\n","-----------------------------------\n","epoch:  5\n","iteration:  5 , batch:  0\n","iteration:  5 , batch:  300\n","iteration:  5 , batch:  600\n","iteration:  5 , batch:  900\n","iteration:  5 , batch:  1200\n","iteration:  5 , batch:  1500\n","iteration:  5 , batch:  1800\n","Train precision at 5:  0.7541174352395825\n","Validation precision at 5:  0.7072086062161167\n","Current best validation precision at 5:  0.7056703351113081\n","Validation precision better than best current precision. Saving model to best_state_dict...\n","Average Loss for the current iteration:  1054.4393310546875\n","-----------------------------------\n","epoch:  6\n","iteration:  6 , batch:  0\n","iteration:  6 , batch:  300\n","iteration:  6 , batch:  600\n","iteration:  6 , batch:  900\n","iteration:  6 , batch:  1200\n","iteration:  6 , batch:  1500\n","iteration:  6 , batch:  1800\n","Train precision at 5:  0.7543830036234419\n","Validation precision at 5:  0.706981297684169\n","Current best validation precision at 5:  0.7072086062161167\n","Average Loss for the current iteration:  1046.234375\n","-----------------------------------\n","epoch:  7\n","iteration:  7 , batch:  0\n","iteration:  7 , batch:  300\n","iteration:  7 , batch:  600\n","iteration:  7 , batch:  900\n","iteration:  7 , batch:  1200\n","iteration:  7 , batch:  1500\n","iteration:  7 , batch:  1800\n","Train precision at 5:  0.754657574325399\n","Validation precision at 5:  0.706625706119341\n","Current best validation precision at 5:  0.7072086062161167\n","Average Loss for the current iteration:  1041.186279296875\n","-----------------------------------\n","epoch:  8\n","iteration:  8 , batch:  0\n","iteration:  8 , batch:  300\n","iteration:  8 , batch:  600\n","iteration:  8 , batch:  900\n","iteration:  8 , batch:  1200\n","iteration:  8 , batch:  1500\n","iteration:  8 , batch:  1800\n","Train precision at 5:  0.7571174577453763\n","Validation precision at 5:  0.7070195575360816\n","Current best validation precision at 5:  0.7072086062161167\n","Average Loss for the current iteration:  1038.56396484375\n","-----------------------------------\n","epoch:  9\n","iteration:  9 , batch:  0\n","iteration:  9 , batch:  300\n","iteration:  9 , batch:  600\n","iteration:  9 , batch:  900\n","iteration:  9 , batch:  1200\n","iteration:  9 , batch:  1500\n","iteration:  9 , batch:  1800\n","Train precision at 5:  0.7560461818918432\n","Validation precision at 5:  0.7057581077127523\n","Current best validation precision at 5:  0.7072086062161167\n","Average Loss for the current iteration:  1036.2425537109375\n","-----------------------------------\n","epoch:  10\n","iteration:  10 , batch:  0\n","iteration:  10 , batch:  300\n","iteration:  10 , batch:  600\n","iteration:  10 , batch:  900\n","iteration:  10 , batch:  1200\n","iteration:  10 , batch:  1500\n","iteration:  10 , batch:  1800\n","Train precision at 5:  0.7612157630589943\n","Validation precision at 5:  0.7059269011770697\n","Current best validation precision at 5:  0.7072086062161167\n","Average Loss for the current iteration:  1014.0449829101562\n","-----------------------------------\n","epoch:  11\n","iteration:  11 , batch:  0\n","iteration:  11 , batch:  300\n","iteration:  11 , batch:  600\n","iteration:  11 , batch:  900\n","iteration:  11 , batch:  1200\n","iteration:  11 , batch:  1500\n","iteration:  11 , batch:  1800\n","Train precision at 5:  0.7654896135755002\n","Validation precision at 5:  0.7051211937073949\n","Current best validation precision at 5:  0.7072086062161167\n","Average Loss for the current iteration:  1007.3479614257812\n","-----------------------------------\n","epoch:  12\n","iteration:  12 , batch:  0\n","iteration:  12 , batch:  300\n","iteration:  12 , batch:  600\n","iteration:  12 , batch:  900\n","iteration:  12 , batch:  1200\n","iteration:  12 , batch:  1500\n","iteration:  12 , batch:  1800\n","Train precision at 5:  0.7647975603718007\n","Validation precision at 5:  0.7067191051695964\n","Current best validation precision at 5:  0.7072086062161167\n","Average Loss for the current iteration:  1001.8145141601562\n","-----------------------------------\n","epoch:  13\n","iteration:  13 , batch:  0\n","iteration:  13 , batch:  300\n","iteration:  13 , batch:  600\n","iteration:  13 , batch:  900\n","iteration:  13 , batch:  1200\n","iteration:  13 , batch:  1500\n","iteration:  13 , batch:  1800\n","Train precision at 5:  0.7668444624490868\n","Validation precision at 5:  0.707708234870495\n","Current best validation precision at 5:  0.7072086062161167\n","Validation precision better than best current precision. Saving model to best_state_dict...\n","Average Loss for the current iteration:  994.0457153320312\n","-----------------------------------\n","epoch:  14\n","iteration:  14 , batch:  0\n","iteration:  14 , batch:  300\n","iteration:  14 , batch:  600\n","iteration:  14 , batch:  900\n","iteration:  14 , batch:  1200\n","iteration:  14 , batch:  1500\n","iteration:  14 , batch:  1800\n","Train precision at 5:  0.7649708549951677\n","Validation precision at 5:  0.7066200796705301\n","Current best validation precision at 5:  0.707708234870495\n","Average Loss for the current iteration:  985.4820556640625\n","-----------------------------------\n","epoch:  15\n","iteration:  15 , batch:  0\n","iteration:  15 , batch:  300\n","iteration:  15 , batch:  600\n","iteration:  15 , batch:  900\n","iteration:  15 , batch:  1200\n","iteration:  15 , batch:  1500\n","iteration:  15 , batch:  1800\n","Train precision at 5:  0.7630139760988524\n","Validation precision at 5:  0.7055814372200997\n","Current best validation precision at 5:  0.707708234870495\n","Average Loss for the current iteration:  978.8314819335938\n","-----------------------------------\n","epoch:  16\n","iteration:  16 , batch:  0\n","iteration:  16 , batch:  300\n","iteration:  16 , batch:  600\n","iteration:  16 , batch:  900\n","iteration:  16 , batch:  1200\n","iteration:  16 , batch:  1500\n","iteration:  16 , batch:  1800\n","Train precision at 5:  0.7631895213017401\n","Validation precision at 5:  0.7047025859158892\n","Current best validation precision at 5:  0.707708234870495\n","Average Loss for the current iteration:  970.8983154296875\n","-----------------------------------\n","epoch:  17\n","iteration:  17 , batch:  0\n","iteration:  17 , batch:  300\n","iteration:  17 , batch:  600\n","iteration:  17 , batch:  900\n","iteration:  17 , batch:  1200\n","iteration:  17 , batch:  1500\n","iteration:  17 , batch:  1800\n","Train precision at 5:  0.7619483266941302\n","Validation precision at 5:  0.7041174352395903\n","Current best validation precision at 5:  0.707708234870495\n","Average Loss for the current iteration:  964.2584228515625\n","-----------------------------------\n","epoch:  18\n","iteration:  18 , batch:  0\n","iteration:  18 , batch:  300\n","iteration:  18 , batch:  600\n","iteration:  18 , batch:  900\n","iteration:  18 , batch:  1200\n","iteration:  18 , batch:  1500\n","iteration:  18 , batch:  1800\n","Train precision at 5:  0.7622330250039442\n","Validation precision at 5:  0.704362748407731\n","Current best validation precision at 5:  0.707708234870495\n","Average Loss for the current iteration:  958.8643798828125\n","-----------------------------------\n","epoch:  19\n","iteration:  19 , batch:  0\n","iteration:  19 , batch:  300\n","iteration:  19 , batch:  600\n","iteration:  19 , batch:  900\n","iteration:  19 , batch:  1200\n","iteration:  19 , batch:  1500\n","iteration:  19 , batch:  1800\n","Train precision at 5:  0.7637420385749402\n","Validation precision at 5:  0.7063623883150068\n","Current best validation precision at 5:  0.707708234870495\n","Average Loss for the current iteration:  954.5791015625\n","-----------------------------------\n","epoch:  20\n","iteration:  20 , batch:  0\n","iteration:  20 , batch:  300\n","iteration:  20 , batch:  600\n","iteration:  20 , batch:  900\n","iteration:  20 , batch:  1200\n","iteration:  20 , batch:  1500\n","iteration:  20 , batch:  1800\n","Train precision at 5:  0.7760200751693608\n","Validation precision at 5:  0.7065728175005221\n","Current best validation precision at 5:  0.707708234870495\n","Average Loss for the current iteration:  944.68994140625\n","-----------------------------------\n","epoch:  21\n","iteration:  21 , batch:  0\n","iteration:  21 , batch:  300\n","iteration:  21 , batch:  600\n","iteration:  21 , batch:  900\n","iteration:  21 , batch:  1200\n","iteration:  21 , batch:  1500\n","iteration:  21 , batch:  1800\n","Train precision at 5:  0.7782605270857298\n","Validation precision at 5:  0.7075315643778431\n","Current best validation precision at 5:  0.707708234870495\n","Average Loss for the current iteration:  936.040283203125\n","-----------------------------------\n","epoch:  22\n","iteration:  22 , batch:  0\n","iteration:  22 , batch:  300\n","iteration:  22 , batch:  600\n","iteration:  22 , batch:  900\n","iteration:  22 , batch:  1200\n","iteration:  22 , batch:  1500\n","iteration:  22 , batch:  1800\n","Train precision at 5:  0.7834053518781106\n","Validation precision at 5:  0.7061182004366279\n","Current best validation precision at 5:  0.707708234870495\n","Average Loss for the current iteration:  927.3841552734375\n","-----------------------------------\n","epoch:  23\n","iteration:  23 , batch:  0\n","iteration:  23 , batch:  300\n","iteration:  23 , batch:  600\n","iteration:  23 , batch:  900\n","iteration:  23 , batch:  1200\n","iteration:  23 , batch:  1500\n","iteration:  23 , batch:  1800\n","Train precision at 5:  0.7870490401278356\n","Validation precision at 5:  0.7039250106902685\n","Current best validation precision at 5:  0.707708234870495\n","Average Loss for the current iteration:  921.47509765625\n","-----------------------------------\n","epoch:  24\n","iteration:  24 , batch:  0\n","iteration:  24 , batch:  300\n","iteration:  24 , batch:  600\n","iteration:  24 , batch:  900\n","iteration:  24 , batch:  1200\n","iteration:  24 , batch:  1500\n","iteration:  24 , batch:  1800\n","Train precision at 5:  0.7908705241599711\n","Validation precision at 5:  0.7058166227803828\n","Current best validation precision at 5:  0.707708234870495\n","Average Loss for the current iteration:  915.9345703125\n","-----------------------------------\n","epoch:  25\n","iteration:  25 , batch:  0\n","iteration:  25 , batch:  300\n","iteration:  25 , batch:  600\n","iteration:  25 , batch:  900\n","iteration:  25 , batch:  1200\n","iteration:  25 , batch:  1500\n","iteration:  25 , batch:  1800\n","Train precision at 5:  0.7843427182499518\n","Validation precision at 5:  0.7060506830509012\n","Current best validation precision at 5:  0.707708234870495\n","Average Loss for the current iteration:  910.472412109375\n","-----------------------------------\n","epoch:  26\n","iteration:  26 , batch:  0\n","iteration:  26 , batch:  300\n","iteration:  26 , batch:  600\n","iteration:  26 , batch:  900\n","iteration:  26 , batch:  1200\n","iteration:  26 , batch:  1500\n","iteration:  26 , batch:  1800\n","Train precision at 5:  0.7881383206175606\n","Validation precision at 5:  0.7047937343866209\n","Current best validation precision at 5:  0.707708234870495\n","Average Loss for the current iteration:  907.2202758789062\n","-----------------------------------\n","epoch:  27\n","iteration:  27 , batch:  0\n","iteration:  27 , batch:  300\n","iteration:  27 , batch:  600\n","iteration:  27 , batch:  900\n","iteration:  27 , batch:  1200\n","iteration:  27 , batch:  1500\n","iteration:  27 , batch:  1800\n","Train precision at 5:  0.7876758265253327\n","Validation precision at 5:  0.7044921567303741\n","Current best validation precision at 5:  0.707708234870495\n","Average Loss for the current iteration:  903.71044921875\n","-----------------------------------\n","epoch:  28\n","iteration:  28 , batch:  0\n","iteration:  28 , batch:  300\n","iteration:  28 , batch:  600\n","iteration:  28 , batch:  900\n","iteration:  28 , batch:  1200\n","iteration:  28 , batch:  1500\n","iteration:  28 , batch:  1800\n","Train precision at 5:  0.7898982738055064\n","Validation precision at 5:  0.7033173542187272\n","Current best validation precision at 5:  0.707708234870495\n","Average Loss for the current iteration:  900.3687744140625\n","-----------------------------------\n","epoch:  29\n","iteration:  29 , batch:  0\n","iteration:  29 , batch:  300\n","iteration:  29 , batch:  600\n","iteration:  29 , batch:  900\n","iteration:  29 , batch:  1200\n","iteration:  29 , batch:  1500\n","iteration:  29 , batch:  1800\n","Train precision at 5:  0.7916751063398837\n","Validation precision at 5:  0.7038316116400122\n","Current best validation precision at 5:  0.707708234870495\n","Average Loss for the current iteration:  898.0921020507812\n","-----------------------------------\n","epoch:  30\n","iteration:  30 , batch:  0\n","iteration:  30 , batch:  300\n","iteration:  30 , batch:  600\n","iteration:  30 , batch:  900\n","iteration:  30 , batch:  1200\n","iteration:  30 , batch:  1500\n","iteration:  30 , batch:  1800\n","Train precision at 5:  0.7919384241442203\n","Validation precision at 5:  0.7045866810703914\n","Current best validation precision at 5:  0.707708234870495\n","Average Loss for the current iteration:  896.4347534179688\n","-----------------------------------\n","epoch:  31\n","iteration:  31 , batch:  0\n","iteration:  31 , batch:  300\n","iteration:  31 , batch:  600\n","iteration:  31 , batch:  900\n","iteration:  31 , batch:  1200\n","iteration:  31 , batch:  1500\n","iteration:  31 , batch:  1800\n","Train precision at 5:  0.7913071365876734\n","Validation precision at 5:  0.7039835257578978\n","Current best validation precision at 5:  0.707708234870495\n","Average Loss for the current iteration:  893.7406616210938\n","-----------------------------------\n","epoch:  32\n","iteration:  32 , batch:  0\n","iteration:  32 , batch:  300\n","iteration:  32 , batch:  600\n","iteration:  32 , batch:  900\n","iteration:  32 , batch:  1200\n","iteration:  32 , batch:  1500\n","iteration:  32 , batch:  1800\n","Train precision at 5:  0.7978034343843545\n","Validation precision at 5:  0.7030540364143923\n","Current best validation precision at 5:  0.707708234870495\n","Average Loss for the current iteration:  892.8958129882812\n","-----------------------------------\n","epoch:  33\n","iteration:  33 , batch:  0\n","iteration:  33 , batch:  300\n","iteration:  33 , batch:  600\n","iteration:  33 , batch:  900\n","iteration:  33 , batch:  1200\n","iteration:  33 , batch:  1500\n","iteration:  33 , batch:  1800\n","Train precision at 5:  0.7969797222784883\n","Validation precision at 5:  0.7033421105934926\n","Current best validation precision at 5:  0.707708234870495\n","Average Loss for the current iteration:  890.7094116210938\n","-----------------------------------\n","epoch:  34\n","iteration:  34 , batch:  0\n","iteration:  34 , batch:  300\n","iteration:  34 , batch:  600\n","iteration:  34 , batch:  900\n","iteration:  34 , batch:  1200\n","iteration:  34 , batch:  1500\n","iteration:  34 , batch:  1800\n","Train precision at 5:  0.8056635833727193\n","Validation precision at 5:  0.7005727724889317\n","Current best validation precision at 5:  0.707708234870495\n","Average Loss for the current iteration:  887.665283203125\n","-----------------------------------\n","epoch:  35\n","iteration:  35 , batch:  0\n","iteration:  35 , batch:  300\n","iteration:  35 , batch:  600\n","iteration:  35 , batch:  900\n","iteration:  35 , batch:  1200\n","iteration:  35 , batch:  1500\n","iteration:  35 , batch:  1800\n","Train precision at 5:  0.8019636306348878\n","Validation precision at 5:  0.700139535930518\n","Current best validation precision at 5:  0.707708234870495\n","Average Loss for the current iteration:  887.6151123046875\n","-----------------------------------\n","epoch:  36\n","iteration:  36 , batch:  0\n","iteration:  36 , batch:  300\n","iteration:  36 , batch:  600\n","iteration:  36 , batch:  900\n","iteration:  36 , batch:  1200\n","iteration:  36 , batch:  1500\n","iteration:  36 , batch:  1800\n","Train precision at 5:  0.791327391803391\n","Validation precision at 5:  0.7044572727477484\n","Current best validation precision at 5:  0.707708234870495\n","Average Loss for the current iteration:  886.6434936523438\n","-----------------------------------\n","epoch:  37\n","iteration:  37 , batch:  0\n","iteration:  37 , batch:  300\n","iteration:  37 , batch:  600\n","iteration:  37 , batch:  900\n","iteration:  37 , batch:  1200\n","iteration:  37 , batch:  1500\n","iteration:  37 , batch:  1800\n","Train precision at 5:  0.8019298719420254\n","Validation precision at 5:  0.7029640132334236\n","Current best validation precision at 5:  0.707708234870495\n","Average Loss for the current iteration:  884.35595703125\n","-----------------------------------\n","epoch:  38\n","iteration:  38 , batch:  0\n","iteration:  38 , batch:  300\n","iteration:  38 , batch:  600\n","iteration:  38 , batch:  900\n","iteration:  38 , batch:  1200\n","iteration:  38 , batch:  1500\n","iteration:  38 , batch:  1800\n","Train precision at 5:  0.7963428082731321\n","Validation precision at 5:  0.7027772151329116\n","Current best validation precision at 5:  0.707708234870495\n","Average Loss for the current iteration:  883.2074584960938\n","-----------------------------------\n","epoch:  39\n","iteration:  39 , batch:  0\n","iteration:  39 , batch:  300\n","iteration:  39 , batch:  600\n","iteration:  39 , batch:  900\n","iteration:  39 , batch:  1200\n","iteration:  39 , batch:  1500\n","iteration:  39 , batch:  1800\n","Train precision at 5:  0.8026826907928796\n","Validation precision at 5:  0.7036234330340212\n","Current best validation precision at 5:  0.707708234870495\n","Average Loss for the current iteration:  882.456298828125\n","-----------------------------------\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":279},"id":"yYr-Y7x-ZXAF","executionInfo":{"status":"ok","timestamp":1622350000404,"user_tz":240,"elapsed":157,"user":{"displayName":"TONG WU","photoUrl":"","userId":"01876243748839276301"}},"outputId":"90eff054-4986-445d-a2b7-8d3638b63c8f"},"source":["import matplotlib.pyplot as plt\n","\n","plt.plot(val_p, color='b', label='Validation')\n","plt.plot(train_p, color='r', label='Training')\n","plt.vlines(np.argmax(val_p),0.67,1.0, linestyles='dashed', label='Best model')\n","plt.ylabel('Precision@5')\n","plt.xlabel('Epochs')\n","plt.legend()\n","plt.show()"],"execution_count":8,"outputs":[{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"0tMoJ8NoztIA","executionInfo":{"status":"ok","timestamp":1622350000710,"user_tz":240,"elapsed":308,"user":{"displayName":"TONG WU","photoUrl":"","userId":"01876243748839276301"}},"outputId":"ccc2c86f-8dcb-4b40-e7cf-86ec2d7f57d0"},"source":["## n_users=14811\n","## n_beers=52583\n","## device:gpu\n","## hidden_size=150\n","device = torch.device(\"cuda:0\" if torch.cuda.is_available() else \"cpu\")\n","best_model = NeuMF(n_users=n_users, n_beers=n_beers, mlp_hidden_size=mlp_hidden_size, alpha=alpha, gmf_hidden_size=gmf_hidden_size, device=device)\n","torch.save(best_state_dict, \"/content/drive/MyDrive/CS247/Models/checkpoints/neu_mf.pth\")\n","best_model.load_state_dict(best_state_dict['model_state_dict'])"],"execution_count":9,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<All keys matched successfully>"]},"metadata":{"tags":[]},"execution_count":9}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":419},"id":"aW6pU4oXz2_N","executionInfo":{"status":"ok","timestamp":1622350000847,"user_tz":240,"elapsed":138,"user":{"displayName":"TONG WU","photoUrl":"","userId":"01876243748839276301"}},"outputId":"1d1f6dab-44a3-4fc3-ea75-998e2819ce06"},"source":["#label_pred = 'pred_y'\n","best_model.to(device)\n","best_model.eval()\n","test_data[label_pred] = (best_model.predict(test_data)>0.5).cpu().detach().numpy().astype(int)\n","test_data"],"execution_count":10,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>user_id</th>\n","      <th>beer_id</th>\n","      <th>review_overall</th>\n","      <th>pred_y</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>0</td>\n","      <td>5892</td>\n","      <td>4.0</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>2</td>\n","      <td>5892</td>\n","      <td>4.0</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>9</td>\n","      <td>5892</td>\n","      <td>4.0</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>12</td>\n","      <td>5892</td>\n","      <td>4.0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>17</td>\n","      <td>5892</td>\n","      <td>5.0</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>300822</th>\n","      <td>14731</td>\n","      <td>14334</td>\n","      <td>2.5</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>300823</th>\n","      <td>14776</td>\n","      <td>42943</td>\n","      <td>4.5</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>300824</th>\n","      <td>14780</td>\n","      <td>22042</td>\n","      <td>4.5</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>300825</th>\n","      <td>14785</td>\n","      <td>36467</td>\n","      <td>3.5</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>300826</th>\n","      <td>14790</td>\n","      <td>46338</td>\n","      <td>2.0</td>\n","      <td>0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>300827 rows × 4 columns</p>\n","</div>"],"text/plain":["        user_id  beer_id  review_overall  pred_y\n","0             0     5892             4.0       1\n","1             2     5892             4.0       1\n","2             9     5892             4.0       1\n","3            12     5892             4.0       0\n","4            17     5892             5.0       1\n","...         ...      ...             ...     ...\n","300822    14731    14334             2.5       0\n","300823    14776    42943             4.5       0\n","300824    14780    22042             4.5       0\n","300825    14785    36467             3.5       0\n","300826    14790    46338             2.0       0\n","\n","[300827 rows x 4 columns]"]},"metadata":{"tags":[]},"execution_count":10}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"ly8RIBxIz4Jn","executionInfo":{"status":"ok","timestamp":1622350041398,"user_tz":240,"elapsed":40553,"user":{"displayName":"TONG WU","photoUrl":"","userId":"01876243748839276301"}},"outputId":"de22af03-1469-4fb7-cea0-822b3d39fd05"},"source":["#threshold=4\n","#k=5\n","test_prec, test_recall = precision_recall_at_k(test_data, label_pred=label_pred, threshold=threshold, k=k)\n","# Precision and recall can then be averaged over all users\n","print(\"precision at 5 for test set: \", sum(prec for prec in test_prec.values()) / len(test_prec))\n","print(\"recall at 5 for test set:\", sum(rec for rec in test_recall.values()) / len(test_prec))"],"execution_count":11,"outputs":[{"output_type":"stream","text":["precision at 5 for test set:  0.6622508950888488\n","recall at 5 for test set: 0.5023275013141221\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"STYGOKF1z5YD","executionInfo":{"status":"ok","timestamp":1622350082233,"user_tz":240,"elapsed":40843,"user":{"displayName":"TONG WU","photoUrl":"","userId":"01876243748839276301"}},"outputId":"a6493236-30d2-429b-ca77-614ca73f8491"},"source":["best_model.eval()\n","val_data[label_pred] = (best_model.predict(val_data)>0.5).cpu().detach().numpy().astype(int)\n","val_prec, val_recall = precision_recall_at_k(val_data, label_pred=label_pred, threshold=threshold, k=k)\n","# Precision and recall can then be averaged over all users\n","print(\"precision at 5 for validation set: \", sum(prec for prec in val_prec.values()) / len(val_prec))\n","print(\"recall at 5 for validation set:\", sum(rec for rec in val_recall.values()) / len(val_prec))"],"execution_count":12,"outputs":[{"output_type":"stream","text":["precision at 5 for validation set:  0.7036234330340212\n","recall at 5 for validation set: 0.5338583497509659\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":419},"id":"Ty_9lJoyz856","executionInfo":{"status":"ok","timestamp":1622350082233,"user_tz":240,"elapsed":11,"user":{"displayName":"TONG WU","photoUrl":"","userId":"01876243748839276301"}},"outputId":"5ba962d1-9394-41cf-dcaa-8447257b8990"},"source":["test_data[test_data['user_id']==0]"],"execution_count":13,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>user_id</th>\n","      <th>beer_id</th>\n","      <th>review_overall</th>\n","      <th>pred_y</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>0</td>\n","      <td>5892</td>\n","      <td>4.0</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>96</th>\n","      <td>0</td>\n","      <td>9202</td>\n","      <td>4.0</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>156</th>\n","      <td>0</td>\n","      <td>18492</td>\n","      <td>3.5</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>161</th>\n","      <td>0</td>\n","      <td>5624</td>\n","      <td>3.5</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>220</th>\n","      <td>0</td>\n","      <td>4872</td>\n","      <td>4.5</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>44485</th>\n","      <td>0</td>\n","      <td>18487</td>\n","      <td>4.0</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>44487</th>\n","      <td>0</td>\n","      <td>18466</td>\n","      <td>3.5</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>44490</th>\n","      <td>0</td>\n","      <td>5748</td>\n","      <td>4.5</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>44543</th>\n","      <td>0</td>\n","      <td>12886</td>\n","      <td>3.5</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>44544</th>\n","      <td>0</td>\n","      <td>7941</td>\n","      <td>4.0</td>\n","      <td>1</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>1096 rows × 4 columns</p>\n","</div>"],"text/plain":["       user_id  beer_id  review_overall  pred_y\n","0            0     5892             4.0       1\n","96           0     9202             4.0       1\n","156          0    18492             3.5       0\n","161          0     5624             3.5       1\n","220          0     4872             4.5       1\n","...        ...      ...             ...     ...\n","44485        0    18487             4.0       1\n","44487        0    18466             3.5       0\n","44490        0     5748             4.5       1\n","44543        0    12886             3.5       0\n","44544        0     7941             4.0       1\n","\n","[1096 rows x 4 columns]"]},"metadata":{"tags":[]},"execution_count":13}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"N293ZTvzz8-1","executionInfo":{"status":"ok","timestamp":1622350082356,"user_tz":240,"elapsed":132,"user":{"displayName":"TONG WU","photoUrl":"","userId":"01876243748839276301"}},"outputId":"9ba64cd9-7005-456e-8a9a-a14d52433059"},"source":["precisions, recalls = precision_recall_at_k(test_data[test_data['user_id']==0], label_pred=label_pred, threshold=threshold, k=k)\n","print(\"precision at 5 for user 0: \", sum(prec for prec in precisions.values()) / len(precisions))\n","print(\"recall at 5 for user 0:\", sum(rec for rec in recalls.values()) / len(recalls))"],"execution_count":14,"outputs":[{"output_type":"stream","text":["precision at 5 for user 0:  0.8\n","recall at 5 for user 0: 0.006920415224913495\n"],"name":"stdout"}]}]}